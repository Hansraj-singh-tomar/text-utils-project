{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.jsx","index.js"],"names":["Alert","props","alert","div","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","mode","backgroundColor","style","id","Navbar","href","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","placeholder","newText","showAlert","navigator","clipboard","writeText","split","join","filter","element","length","prototypes","PropTypes","string","isRequired","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a7d8db1e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&\r\n        <div div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n};\r\n// props.alert && ... ye jo syntax hai iska mtlb ye hai ki props.alert agar null hai to aage ka code return nhi hoga code props.alert par hi ruk jayega\r\n// this happens because all the JSX will be converted to javascript calls!\r\nexport default Alert;\r\n","// import React, { useState  } from 'react';\r\n\r\nexport default function About(props) {\r\n\r\n    // as a vaariable bhi ham myStyle ko use kar sakte hai but ham useSate ka use kar ke myStyle ka use karenge\r\n    // let myStyle = {\r\n    //     color: 'white',\r\n    //     backgroundColor: 'black'\r\n    // };\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'black0' : 'white'\r\n    }\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color === 'black') {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\");\r\n    //     }\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setBtnText('Enable Dark Mode');\r\n    //     }\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={myStyle}>\r\n                <h1 className=\"my-3\">About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"container my-3\">\r\n                    <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\r\n                </div> */}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // impt shortcut hai ye likhne ka\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        {/* <div className=\"d-flex\">\r\n                            <div className=\"bg-primary rounded mx-2\" onClick={() => { props.toggleMode('primary') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }} ></div>\r\n                            <div className=\"bg-danger rounded mx-2\" onClick={() => { props.toggleMode('danger') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }} ></div>\r\n                            <div className=\"bg-success rounded mx-2\" onClick={() => { props.toggleMode('success') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }} ></div>\r\n                            <div className=\"bg-warning rounded mx-2\" onClick={() => { props.toggleMode('warning') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }} ></div>\r\n                        </div> */}\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                            {/* // Excercise-2 ka code */}\r\n                            {/* <input className=\"form-check-input\" onClick={() => { props.toggleMode(null) }} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Mode</label> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.prototypes = { // ye btate hai ki jo props hai uska type kya hai\r\n    title: PropTypes.string.isRequired, // agar mene title=\"1234\" pass kar diya to ye prototypes mujhe error de dega ki title of type is 'number' you need to write string over here\r\n    aboutText: PropTypes.string,  // isRequired likhne par mujhe props pass karna hi padega nhi to ye error de dega agar defaultProps set hai tab error nhi dega\r\n}\r\n// Navbar.prototypes me p ko capital nhi karna hai\r\n\r\n\r\n// what is default props value\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'About'\r\n};\r\n// agar me title ot aboutText ki value pass na karu ya pass karna bhul jau tab ye defaultprops ki value pass ho jayegi\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    // const [text, setText] = useState(\"enter text here\");\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // wrong way to change the state\r\n    // setText(\"new text\"); // correct way to change the state\r\n    const upperCase = () => {\r\n        // console.log(\"upper case was clicked:\" + text);\r\n        let newText = text.toUpperCase();\r\n        // setText(\"you have clicked on handleUpClick\");\r\n        setText(newText);\r\n        props.showAlert(\"converted to upperCase\", \"success\");\r\n    }\r\n    const lowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lowerCase\", \"success\");\r\n    }\r\n    const clearText = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"text cleared\", \"success\");\r\n    }\r\n    const copyText = () => {\r\n        // var text = document.getElementById(\"mybox\");\r\n        // text.select(); // navigator.clipboard ka use kar rhe hai to hame ye do line likhne ki jarurat hi nhi hai\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"copied to Clipboard\", \"success\");\r\n    }\r\n    const extraSpaces = () => {\r\n        let newText = text.split(/[  ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces removed\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"mybox\" rows=\"8\" placeholder={props.placeholder}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={upperCase}>convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={lowerCase}>convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={clearText}>clear text</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={copyText}>copy text</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={extraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2> Your Text Summary </h2>\r\n                <p> {text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} words and {text.length} characters </p> {/*agar element ki length zero hai tab vo element is array me nhi rhega varna vo rhega mtlb jis bhi element ke liye true return karega vo rhega else vo nhi rhega */}\r\n                <p> {0.008 * text.split(\" \").length} Minutes to read </p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview it here...\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// in 1min = 125 words can read\r\n// so 1 word ke liye 1/125(0.008minute) time lagega  \r\n\r\n// state ek component ko belong karti hai\r\n// hooks - hooks are a new addition in react. they let you use state and other react features without writtting a class \r\n// hooks bina class banaye class ke feature use karne me help karta hai ","import React, { useState } from 'react'; // function base component me react ko import karne ki jarurat nhi hai\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js';\r\nimport Alert from './components/Alert';\r\nimport About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Routes,\r\n//   Route,\r\n//   // Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nconst App = () => {\r\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not \r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    }\r\n    else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  }\r\n\r\n  // Excercise second ka code hai ye\r\n\r\n  // const removeBodyClasses = () => {\r\n  //   document.body.classList.remove('bg-light');\r\n  //   document.body.classList.remove('bg-dark');\r\n  //   document.body.classList.remove('bg-danger');\r\n  //   document.body.classList.remove('bg-success');\r\n  //   document.body.classList.remove('bg-warning');\r\n  // }\r\n  // const toggleMode = (cls) => {  // cls as primary cls ka mtlb class hai \r\n  //   console.log(cls);\r\n  //   removeBodyClasses();\r\n  //   document.body.classList.add('bg-' + cls);\r\n  //   if (mode === 'light') {\r\n  //     setMode('dark');\r\n  //     document.body.style.backgroundColor = '#042743';\r\n  //     showAlert(\"Dark mode has been enabled\", \"success\");\r\n  //     // document.title = \"TextUtils - Dark Mode\"; // Dynamically title ko change karne ke liye \r\n  //     // setInterval(() => {  // jab hame apni website ko download karane ke liye bolna hota hai jo hame title par baar baar show karega \r\n  //     //   document.title = \"TextUtils is Amazing Mode\"; // ek tarah se bol sakte hai ki dhyan akarshit krane ke liye karte hai \r\n  //     // }, 2000);\r\n  //     // setInterval(() => {\r\n  //     //   document.title = \"Install TextUtils Now\";\r\n  //     // }, 1500);\r\n  //   }\r\n  //   else {\r\n  //     setMode('light');\r\n  //     document.body.style.backgroundColor = 'white';\r\n  //     showAlert(\"Light mode has been enabled\", \"success\");\r\n  //     // document.title = \"TextUtils - Light Mode\"; // Dynamically title ko change karne ke liye \r\n  //   }\r\n  // }\r\n\r\n\r\n  //   return (\r\n  //     <>\r\n  //       <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} /> {/* yha me basically title and aboutText type ke props pass kar rha hu*/}\r\n  //       <Alert alert={alert} />\r\n  //       <div className=\"container my-3\">\r\n  //         <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} placeholder=\"enter text here\" />\r\n  //         {/* <About /> */}\r\n  //       </div>\r\n  //     </>\r\n  //   );\r\n  // };\r\n\r\n  // yha me textForm and About  component ko ek sath nhi show kar sakta click karne par iske liye react router dom ka use karna padega\r\n\r\n  // React Router ka use kaise karenge uska code yha likhenge\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} /> {/* yha me basically title and aboutText type ke props pass kar rha hu*/}\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        {/* <Routes>\r\n            <Route exact path=\"/about\" element={<About />} />\r\n\r\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} placeholder=\"enter text here\" />} />\r\n          </Routes> */}\r\n        {/* exact means vo exact path match karega /about hi hona chahiye Url me /users --> component 1 and /users/home --> component 2 me agar exact use nhi karunga to mujhe component 1 hi show hoga */}\r\n        {/* <About /> */}\r\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} placeholder=\"enter text here\" />\r\n      </div>\r\n      <About mode={mode} />\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n\r\n//  {/* <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} placeholder=\"enter text here\" /> */}\r\n// {/* <About /> */}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <App />,\n  // <BrowserRouter>\n  //   <App />\n  // </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}